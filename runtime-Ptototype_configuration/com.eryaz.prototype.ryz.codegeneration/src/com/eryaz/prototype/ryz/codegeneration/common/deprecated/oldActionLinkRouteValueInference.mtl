[comment encoding = UTF-8 /]
[module oldActionLinkRouteValueInference('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]


[template public generateOldActionLinkRouteValueInference(aViewToControllerRelation : ViewToControllerRelation) ? (aViewToControllerRelation.getOperands()->isEmpty())]
[/template]

[template public generateOldActionLinkRouteValueInference(aViewToControllerRelation : ViewToControllerRelation) ? (aViewToControllerRelation.getOperands()->isEmpty()._not()._and(aViewToControllerRelation.getViewToModelRelation().modelcardinality = ModelCardinality::ONE))]
[for (aString : String | aViewToControllerRelation.getOperands()) separator (', ')][aString/] = Model.[aString/][/for]
[/template]

[template public generateOldActionLinkRouteValueInference(aViewToControllerRelation : ViewToControllerRelation) ? (aViewToControllerRelation.getOperands()->isEmpty()._not()._and(aViewToControllerRelation.getViewToModelRelation().modelcardinality = ModelCardinality::ALL))]
[for (aString : String | aViewToControllerRelation.getOperands()) separator (', ')][aString/] = Model.Select(m => m.[aString/]).FirstOrDefault()[/for]
[/template]





[query private getParameters(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Parameter) = 
aViewToControllerRelation.actionmethod.parameters
/]

[query private getAbstractView(aViewToControllerRelation : ViewToControllerRelation) : AbstractView = 
aViewToControllerRelation.helperforsendingrequest.eContainer(AbstractView)
/]




[query private getViewToModelRelation(aViewToControllerRelation : ViewToControllerRelation) : ViewToModelRelation = 
aViewToControllerRelation.eContainer(Project).getViewToModelRelationsInProject()->any(e | e.abstractview = getAbstractView(aViewToControllerRelation))
/]

[query private getModel(aViewToControllerRelation : ViewToControllerRelation) : Model = 
getViewToModelRelation(aViewToControllerRelation).model
/]




[query private getAllModelProperties(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Property) = 
aViewToControllerRelation.getModel()->closure(inherits)->including(aViewToControllerRelation.getModel()).properties->asOrderedSet()
/]

[query private parameterPropertyEquality(aParameter : Parameter, aProperty : Property) : Boolean = 
(aParameter.name = aProperty.name)._and(aParameter.type.toString() = aProperty.type.toString()) 
/]

[query private getRelatedProperties(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(String) = 
getParameters(aViewToControllerRelation)->product(getAllModelProperties(aViewToControllerRelation))->select(e | parameterPropertyEquality(e.first, e.second))->collect(e | e.first.name)->asOrderedSet()
/]




[query private getAllKeys(aViewToControllerRelation : ViewToControllerRelation) : Bag(TableKey) = 
aViewToControllerRelation.getModel()->closure(inherits)->including(aViewToControllerRelation.getModel()).tablekeys
/]

[query private parameterKeyEquality(aParameter : Parameter, aTableKey : TableKey) : Boolean = 
(aParameter.name = aTableKey.name)._and(aParameter.type.toString() = aTableKey.type.toString()) 
/]

[query private getRelatedKeys(aViewToControllerRelation : ViewToControllerRelation) : Bag(String) = 
getParameters(aViewToControllerRelation)->product(getAllKeys(aViewToControllerRelation))->select(e | parameterKeyEquality(e.first, e.second))->collect(e | e.first.name)
/]




[query private getOperands(aViewToControllerRelation : ViewToControllerRelation) : Bag(String) = 
getRelatedKeys(aViewToControllerRelation)->union(getRelatedProperties(aViewToControllerRelation)) 
/]