[comment encoding = UTF-8 /]
[module presentationFormElement('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::enumtypes::buttonType /]
[import com::eryaz::prototype::ryz::codegeneration::common::enumtypes::inputDataType /]
[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]

[template public generatePresentationFormElement(arg : PresentationFormElement) ]
[/template]


[template public generatePresentationFormElement(arg : MultipleChoice) ? (arg.multipleChoiceType = MultipleChoiceType::DROPDOWN_LIST) ]
<label for="[arg.labelText/]">[arg.labelText/]</label>
<select id="[arg.labelText/]" name="[arg.labelText/]"[if (arg.multipleSelection)] multiple[/if]>
	[let aPresentationFormElementToPropertyKey : PresentationFormElementToPropertyKey = arg.getRelatedFormElementToPropetyKey()]
	[let aProperty : Property = aPresentationFormElementToPropertyKey.property]
	@foreach(var item in Model)
    {
		<option value="@item.[aProperty.name/]">@item.[aProperty.name/]</option>
    }
	[elselet aTableKey : TableKey = aPresentationFormElementToPropertyKey.tablekey]
	@foreach(var item in Model)
    {
		<option value="@item.[aTableKey.name/]">@item.[aTableKey.name/]</option>
    }
	[/let]
	[else]
	[for (aChoice : Choice | arg.choice)]
	<option value="[aChoice.value/]"[if (aChoice.selected)] selected[/if]>[aChoice.text/]</option>
	[/for]
	[/let]
</select>
[/template]


[template public generatePresentationFormElement(arg : MultipleChoice) ? (arg.multipleChoiceType = MultipleChoiceType::RADIO_BUTTON) ]
<fieldset>
	<legend>[arg.labelText/]</legend>
	[let aPresentationFormElementToPropertyKey : PresentationFormElementToPropertyKey = arg.getRelatedFormElementToPropetyKey()]
	[let aProperty : Property = aPresentationFormElementToPropertyKey.property]
	@foreach(var item in Model)
    {
		<label for="@item.[aProperty.name/]">@item.[aProperty.name/]</label>
		<input type="radio" id="@item.[aProperty.name/]" name="[aProperty.name/]" value="@item.[aProperty.name/]">
		<br>
    }
	[elselet aTableKey : TableKey = aPresentationFormElementToPropertyKey.tablekey]
	@foreach(var item in Model)
    {
		<label for="@item.[aTableKey.name/]">@item.[aTableKey.name/]</label>
		<input type="radio" id="@item.[aTableKey.name/]" name="[aTableKey.name/]" value="@item.[aTableKey.name/]">
		<br>
    }
	[/let]
	[else]
	[for (aChoice : Choice | arg.choice)]
	<label for="[aChoice.value/]">[aChoice.text/]</label>
	<input type="radio" id="[aChoice.value/]" name="[arg.labelText/]" value="[aChoice.value/]"[if (aChoice.selected)] checked[/if]>
	<br>
	[/for]
	[/let]
</fieldset>
[/template]


[template public generatePresentationFormElement(arg : MultipleChoice) ? (arg.multipleChoiceType = MultipleChoiceType::CHECKBOX_GROUP) ]
<fieldset>
	<legend>[arg.labelText/]</legend>
	[let aPresentationFormElementToPropertyKey : PresentationFormElementToPropertyKey = arg.getRelatedFormElementToPropetyKey()]
	[let aProperty : Property = aPresentationFormElementToPropertyKey.property]
	@foreach(var item in Model)
    {
		<label for="@item.[aProperty.name/]">@item.[aProperty.name/]</label>
		<input type="checkbox" id="@item.[aProperty.name/]" name="[aProperty.name/]" value="@item.[aProperty.name/]">
		<br>
    }
	[elselet aTableKey : TableKey = aPresentationFormElementToPropertyKey.tablekey]
	@foreach(var item in Model)
    {
		<label for="@item.[aTableKey.name/]">@item.[aTableKey.name/]</label>
		<input type="checkbox" id="@item.[aTableKey.name/]" name="[aTableKey.name/]" value="@item.[aTableKey.name/]">
		<br>
    }
	[/let]
	[else]
	[for (aChoice : Choice | arg.choice)]
  	<label for="[aChoice.value/]">[aChoice.text/]</label>
	<input type="checkbox" id="[aChoice.value/]" name="[arg.labelText/]" value="[aChoice.value/]"[if (aChoice.selected)] checked[/if]>
	<br>
	[/for]
	[/let]
</fieldset>
[/template]


[template public generatePresentationFormElement(arg : Button) ]
<input type="[arg.buttonType.generateButtonType()/]" name="[arg.labelText/]" value="[arg.labelText/]"><br>
[/template]


[template public generatePresentationFormElement(arg : Input)]
[if (arg.isHidden)]
<input type="hidden" name="[arg.labelText/]" id="[arg.labelText/]"> 
[else]
<label for="[arg.labelText/]">[arg.labelText/]</label>
<input type="[arg.inputDataType.generateInputDataType()/]" id="[arg.labelText/]" name="[arg.labelText/]"><br>
[/if]
[/template]






[query private getRelatedFormElementToPropetyKey(arg : MultipleChoice) : PresentationFormElementToPropertyKey = 
arg.eContainer(Project).getFormElementToPropertyKeyRelationsInProject().presentationformelementtoproperty->any(e | e.presentationformelement = arg)
/]

