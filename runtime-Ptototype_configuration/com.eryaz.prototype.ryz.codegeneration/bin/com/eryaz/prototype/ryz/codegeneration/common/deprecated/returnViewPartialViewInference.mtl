[comment encoding = UTF-8 /]
[module returnViewPartialViewInference('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]
[import com::eryaz::prototype::ryz::codegeneration::common::inferences::returnViewPartialViewLambdaInference /]


[template public generateReturnViewPartialViewInference(aControllerToViewRelation : ControllerToViewRelation) ? (aControllerToViewRelation.getViewToModelRelation().oclIsUndefined())]
[/template]

[template public generateReturnViewPartialViewInference(aControllerToViewRelation : ControllerToViewRelation) ? (aControllerToViewRelation.getViewToModelRelation().oclIsUndefined()._not()._and(getViewToModelRelation(aControllerToViewRelation).modelcardinality = ModelCardinality::ONE))]
[if (aControllerToViewRelation.viewHasNoForm())]
[if (getControllerToModelRelation(aControllerToViewRelation).oclIsUndefined()._not()._and(getControllerToModelRelation(aControllerToViewRelation).modelOperation = ModelOperation::READ))]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]
[else]
, _uow.[getViewToModelRelation(aControllerToViewRelation).model.name/]Repository.GetAll([generateReturnViewPartialViewLambdaInference(getViewToModelRelation(aControllerToViewRelation).model, aControllerToViewRelation.actionmethod)/]).FirstOrDefault()
[/if]
[else]
[if (modelOperationCreateOrUpdate(aControllerToViewRelation))]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]ViewModel
[else]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]
[/if]
[/if]
[/template]



[template public generateReturnViewPartialViewInference(aControllerToViewRelation : ControllerToViewRelation) ? (aControllerToViewRelation.getViewToModelRelation().oclIsUndefined()._not()._and(getViewToModelRelation(aControllerToViewRelation).modelcardinality = ModelCardinality::ALL))]
[if (aControllerToViewRelation.viewHasNoForm())]
[if (getControllerToModelRelation(aControllerToViewRelation).oclIsUndefined()._not()._and(getControllerToModelRelation(aControllerToViewRelation).modelOperation = ModelOperation::READ))]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]
[else]
, _uow.[getViewToModelRelation(aControllerToViewRelation).model.name/]Repository.GetAll([generateReturnViewPartialViewLambdaInference(getViewToModelRelation(aControllerToViewRelation).model, aControllerToViewRelation.actionmethod)/])
[/if]
[else]
[if (modelOperationCreateOrUpdate(aControllerToViewRelation))]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]ViewModel
[else]
, [getViewToModelRelation(aControllerToViewRelation).model.name/]
[/if]
[/if]
[/template]


[query private viewHasNoForm(aControllerToViewRelation : ControllerToViewRelation) : Boolean = 
aControllerToViewRelation.returns.htmlelements->filter(Form)->isEmpty()
/]




[comment ActionMethod'un döndürdüðü View için ViewModel iliþkisi/]
[query private getViewToModelRelation(aControllerToViewRelation : ControllerToViewRelation) : ViewToModelRelation = 
aControllerToViewRelation.eContainer(Project).getViewToModelRelationsInProject()->any(r | r.abstractview = aControllerToViewRelation.returns)
/]

[comment ActionMethod'un döndürdüðü View ile ilgili ViewModel'daki Model/]
[query private getModel(aControllerToViewRelation : ControllerToViewRelation) : Model = 
getViewToModelRelation(aControllerToViewRelation).model
/]




[comment ActionMethod'un döndürdüðü View'in iliþkisi olduðu Model ile ActionMethod'un iliþkisini döndürür./]
[query private getControllerToModelRelation(aControllerToViewRelation : ControllerToViewRelation) : ControllerToModelRelation = 
aControllerToViewRelation.eContainer(Project).getControllerToModelRelationsInProject()->any(r | (r.actionmethod = aControllerToViewRelation.actionmethod)._and(r.model = getModel(aControllerToViewRelation)))
/]







[query private modelOperationCreateOrUpdate(aControllerToViewRelation : ControllerToViewRelation) : Boolean = 
(getControllerToModelRelation(aControllerToViewRelation).modelOperation = ModelOperation::CREATE)._or(getControllerToModelRelation(aControllerToViewRelation).modelOperation = ModelOperation::UPDATE)
/]

