[comment encoding = UTF-8 /]
[module actionMethod('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::httpMethodTypeForActionMethod/]
[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]
[import com::eryaz::prototype::ryz::codegeneration::common::operationCreateForModel /]
[import com::eryaz::prototype::ryz::codegeneration::common::operationReadForModel /]
[import com::eryaz::prototype::ryz::codegeneration::common::operationUpdateForModel /]
[import com::eryaz::prototype::ryz::codegeneration::common::operationDeleteForModel /]
[import com::eryaz::prototype::ryz::codegeneration::common::returnStatement /]
[import com::eryaz::prototype::ryz::codegeneration::common::actionMethodParameters /]
[import com::eryaz::prototype::ryz::codegeneration::common::returnViewPartialViewLambdaInference /]

[template public generateActionMethod(anActionMethod : ActionMethod)]
[if (anActionMethod.httpMethod = HttpMethod::POST)][ '[' /]ValidateAntiForgeryToken[ ']' /][/if]
[anActionMethod.httpMethod.generateHttpMethodTypeForActionMethod()/]
public ActionResult [anActionMethod.name/]([anActionMethod.generateActionMethodParameters()/]){
	[for (aControllerToModelRelation : ControllerToModelRelation | anActionMethod.getControllerToModelRelationsRelatedToActionMethodForCreate()) separator ('\n')]
	[aControllerToModelRelation.generateOperationCreateForModel()/]
	[/for]
	[for (aControllerToModelRelation : ControllerToModelRelation | anActionMethod.getControllerToModelRelationsRelatedToActionMethodForRead()) separator ('\n')]
	[aControllerToModelRelation.generateOperationReadForModel()/]
	[/for]
	[for (aControllerToModelRelation : ControllerToModelRelation | anActionMethod.getControllerToModelRelationsRelatedToActionMethodForUpdate()) separator ('\n')]
	[aControllerToModelRelation.generateOperationUpdateForModel()/]
	[/for]
	[for (aControllerToModelRelation : ControllerToModelRelation | anActionMethod.getControllerToModelRelationsRelatedToActionMethodForDelete()) separator ('\n')]
	[aControllerToModelRelation.generateOperationDeleteForModel()/]
	[/for]

	[anActionMethod.generateReturnStatement()/]
}
[/template]


[query private getControllerToModelRelationsRelatedToActionMethod(anActionMethod : ActionMethod) : Set(ControllerToModelRelation) = 
anActionMethod.eContainer(Project).getControllerToModelRelationsInProject()->select(r | r.actionmethod = anActionMethod)
/]

[query private getControllerToModelRelationsRelatedToActionMethodForCreate(anActionMethod : ActionMethod) : Set(ControllerToModelRelation) = 
getControllerToModelRelationsRelatedToActionMethod(anActionMethod)->select(r | r.modelOperation = ModelOperation::CREATE)
/]

[query private getControllerToModelRelationsRelatedToActionMethodForRead(anActionMethod : ActionMethod) : Set(ControllerToModelRelation) = 
getControllerToModelRelationsRelatedToActionMethod(anActionMethod)->select(r | r.modelOperation = ModelOperation::READ)
/]

[query private getControllerToModelRelationsRelatedToActionMethodForUpdate(anActionMethod : ActionMethod) : Set(ControllerToModelRelation) = 
getControllerToModelRelationsRelatedToActionMethod(anActionMethod)->select(r | r.modelOperation = ModelOperation::UPDATE)
/]

[query private getControllerToModelRelationsRelatedToActionMethodForDelete(anActionMethod : ActionMethod) : Set(ControllerToModelRelation) = 
getControllerToModelRelationsRelatedToActionMethod(anActionMethod)->select(r | r.modelOperation = ModelOperation::DELETE)
/]






[query private getControllerToViewRelationForActionMethod(anActionMethod : ActionMethod) : ControllerToViewRelation = 
anActionMethod.eContainer(Project).getControllerToViewRelationsInProject()->any(r | r.actionmethod = anActionMethod)
/]

[query private getViewToModelRelationForActionMethod(anActionMethod : ActionMethod) : ViewToModelRelation = 
anActionMethod.eContainer(Project).getViewToModelRelationsInProject()->any(r | r.abstractview = getControllerToViewRelationForActionMethod(anActionMethod).returns)
/]