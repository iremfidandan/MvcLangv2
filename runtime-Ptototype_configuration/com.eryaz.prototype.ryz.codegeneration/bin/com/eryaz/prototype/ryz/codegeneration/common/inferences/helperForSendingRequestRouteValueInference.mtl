[comment encoding = UTF-8 /]
[module helperForSendingRequestRouteValueInference('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]
[import com::eryaz::prototype::ryz::codegeneration::common::enumtypes::actionMethodParameterType /]


[template public generateHelperForSendingRequestRouteValueInference(aViewToControllerRelation : ViewToControllerRelation) post (trim())]
[let aViewToModelRelation : ViewToModelRelation = aViewToControllerRelation.getViewToModelRelation()]
[if (aViewToModelRelation.modelcardinality = ModelCardinality::ONE)]
[for (aParameter : Parameter | aViewToControllerRelation.getOperands()) separator (', ')][aParameter.generateRouteValueForOne()/][/for]
[else]
[for (aParameter : Parameter | aViewToControllerRelation.getOperands()) separator (', ')][aParameter.generateRouteValueForAll()/][/for]
[/if]
[/let]
[/template]


[template private generateRouteValueForOne(aParameter : Parameter)]
[if (aParameter.isList)]
[aParameter.name/] = new List<[aParameter.type.generateActionMethodParameterType()/]>{Model.[aParameter.name/]}
[else]
[aParameter.name/] = Model.[aParameter.name/]
[/if]
[/template]

[template private generateRouteValueForAll(aParameter : Parameter)]
[if (aParameter.isList)]
[aParameter.name/] = Model.Select(m => m.[aParameter.name/])
[else]
[aParameter.name/] = Model.Select(m => m.[aParameter.name/]).FirstOrDefault()
[/if]
[/template]


[query private getParameters(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Parameter) = 
aViewToControllerRelation.actionmethod.parameters
/]



[query private getAbstractView(aViewToControllerRelation : ViewToControllerRelation) : AbstractView = 
aViewToControllerRelation.helperforsendingrequest.eContainer(AbstractView)
/]

[query private getViewToModelRelation(aViewToControllerRelation : ViewToControllerRelation) : ViewToModelRelation = 
aViewToControllerRelation.eContainer(Project).getViewToModelRelationsInProject()->any(e | e.abstractview = getAbstractView(aViewToControllerRelation))
/]



[query private getModel(aViewToControllerRelation : ViewToControllerRelation) : Model = 
getViewToModelRelation(aViewToControllerRelation).model
/]

[query private getAllModelProperties(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Property) = 
aViewToControllerRelation.getModel()->closure(inherits)->including(aViewToControllerRelation.getModel()).properties->asOrderedSet()
/]



[query private parameterPropertyEquality(aParameter : Parameter, aProperty : Property) : Boolean = 
(aParameter.name = aProperty.name)._and(aParameter.type.toString() = aProperty.type.toString()) 
/]

[query private getParametersRelatedToProperties(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Parameter) = 
getParameters(aViewToControllerRelation)->product(getAllModelProperties(aViewToControllerRelation))->select(e | parameterPropertyEquality(e.first, e.second))->collect(e | e.first)->asOrderedSet()
/]



[query private getAllKeys(aViewToControllerRelation : ViewToControllerRelation) : Bag(TableKey) = 
aViewToControllerRelation.getModel()->closure(inherits)->including(aViewToControllerRelation.getModel()).tablekeys
/]

[query private parameterKeyEquality(aParameter : Parameter, aTableKey : TableKey) : Boolean = 
(aParameter.name = aTableKey.name)._and(aParameter.type.toString() = aTableKey.type.toString()) 
/]

[query private getParametersRelatedToKeys(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Parameter) = 
getParameters(aViewToControllerRelation)->product(getAllKeys(aViewToControllerRelation))->select(e | parameterKeyEquality(e.first, e.second))->collect(e | e.first)->asOrderedSet()
/]




[query private getOperands(aViewToControllerRelation : ViewToControllerRelation) : OrderedSet(Parameter) = 
aViewToControllerRelation.getParametersRelatedToKeys()->union(aViewToControllerRelation.getParametersRelatedToProperties())->asOrderedSet()
/]