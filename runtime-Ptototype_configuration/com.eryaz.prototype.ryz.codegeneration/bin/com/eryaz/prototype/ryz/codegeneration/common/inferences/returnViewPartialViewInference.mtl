[comment encoding = UTF-8 /]
[module returnViewPartialViewInference('http://www.eryaz.com/prototype/ryz')]

[import com::eryaz::prototype::ryz::codegeneration::common::mvcRelations /]
[import com::eryaz::prototype::ryz::codegeneration::common::inferences::returnViewPartialViewLambdaInference /]


[template public generateReturnViewPartialViewInference(aControllerToViewRelation : ControllerToViewRelation) post (trim())]
[let aViewToModelRelation : ViewToModelRelation = aControllerToViewRelation.getViewToModelRelation()]
[if (aControllerToViewRelation.useRepository())]
[if (aViewToModelRelation.modelcardinality = ModelCardinality::ONE)]
, _uow.[aViewToModelRelation.model.name/]Repository.GetAll([aViewToModelRelation.model.generateReturnViewPartialViewLambdaInference(aControllerToViewRelation.actionmethod)/]).FirstOrDefault()
[else]
, _uow.[aViewToModelRelation.model.name/]Repository.GetAll([aViewToModelRelation.model.generateReturnViewPartialViewLambdaInference(aControllerToViewRelation.actionmethod)/])
[/if]
[else]
, [aViewToModelRelation.model.name/]
[/if]
[/let]
[/template]



[comment ActionMethod'un döndürdüðü View için ViewModel iliþkisi/]
[query private getViewToModelRelation(aControllerToViewRelation : ControllerToViewRelation) : ViewToModelRelation = 
aControllerToViewRelation.eContainer(Project).getViewToModelRelationsInProject()->any(r | r.abstractview = aControllerToViewRelation.returns)
/]

[comment ActionMethod'un döndürdüðü View ile ilgili ViewModel'daki Model/]
[query private getModel(aControllerToViewRelation : ControllerToViewRelation) : Model = 
getViewToModelRelation(aControllerToViewRelation).model
/]

[comment ActionMethod'un döndürdüðü View'in iliþkisi olduðu Model ile ActionMethod'un iliþkisini döndürür./]
[query private getControllerToModelRelation(aControllerToViewRelation : ControllerToViewRelation) : ControllerToModelRelation = 
aControllerToViewRelation.eContainer(Project).getControllerToModelRelationsInProject()->any(r | (r.actionmethod = aControllerToViewRelation.actionmethod)._and(r.model = getModel(aControllerToViewRelation)))
/]


[query private useRepository(aControllerToViewRelation : ControllerToViewRelation) : Boolean = 
aControllerToViewRelation.getControllerToModelRelation().oclIsUndefined()
/]